<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="374.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="357" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="357" > </text>
<g id="frames">
<g >
<title>__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::base (586,211 samples, 0.10%)</title><rect x="1003.7" y="181" width="1.3" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1006.73" y="191.5" ></text>
</g>
<g >
<title>do_syscall_64 (53,087 samples, 0.01%)</title><rect x="1187.2" y="245" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1190.24" y="255.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;int&gt;::destroy&lt;int&gt; (1,189,755 samples, 0.21%)</title><rect x="1036.1" y="197" width="2.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1039.10" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::operator- (1,161,741 samples, 0.21%)</title><rect x="993.7" y="213" width="2.4" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="996.71" y="223.5" ></text>
</g>
<g >
<title>std::initializer_list&lt;int&gt;::begin (595,011 samples, 0.11%)</title><rect x="1042.5" y="197" width="1.3" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="1045.53" y="207.5" ></text>
</g>
<g >
<title>bprm_execve (71,225 samples, 0.01%)</title><rect x="1189.9" y="213" width="0.1" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1192.85" y="223.5" ></text>
</g>
<g >
<title>mas_destroy (412,239 samples, 0.07%)</title><rect x="1185.1" y="69" width="0.9" height="15.0" fill="rgb(250,209,49)" rx="2" ry="2" />
<text  x="1188.11" y="79.5" ></text>
</g>
<g >
<title>std::initializer_list&lt;int&gt;::end (595,011 samples, 0.11%)</title><rect x="1042.5" y="213" width="1.3" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1045.53" y="223.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1,803,748 samples, 0.32%)</title><rect x="537.4" y="197" width="3.7" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="540.35" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_S_max_size (588,142 samples, 0.10%)</title><rect x="1062.2" y="181" width="1.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1065.19" y="191.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (1,803,748 samples, 0.32%)</title><rect x="537.4" y="213" width="3.7" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="540.35" y="223.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (653,570 samples, 0.12%)</title><rect x="973.4" y="229" width="1.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="976.38" y="239.5" ></text>
</g>
<g >
<title>std::__copy_move_backward&lt;true, true, std::random_access_iterator_tag&gt;::__copy_move_b&lt;int&gt; (602,171 samples, 0.11%)</title><rect x="1019.9" y="117" width="1.3" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1022.92" y="127.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (2,351,080 samples, 0.42%)</title><rect x="10.0" y="293" width="4.9" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>do_mas_munmap (412,239 samples, 0.07%)</title><rect x="1185.1" y="149" width="0.9" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1188.11" y="159.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (412,239 samples, 0.07%)</title><rect x="1185.1" y="277" width="0.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1188.11" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::back (1,161,741 samples, 0.21%)</title><rect x="993.7" y="229" width="2.4" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="996.71" y="239.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (609,860 samples, 0.11%)</title><rect x="1188.6" y="181" width="1.3" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1191.58" y="191.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::destroy&lt;int&gt; (1,189,755 samples, 0.21%)</title><rect x="1036.1" y="213" width="2.5" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="1039.10" y="223.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (591,799 samples, 0.10%)</title><rect x="1078.3" y="197" width="1.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1081.26" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::end (626,026 samples, 0.11%)</title><rect x="1080.8" y="213" width="1.3" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1083.80" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (208,628,098 samples, 36.86%)</title><rect x="541.1" y="245" width="435.0" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="544.11" y="255.5" >std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[]</text>
</g>
<g >
<title>malloc (587,612 samples, 0.10%)</title><rect x="1047.5" y="165" width="1.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1050.46" y="175.5" ></text>
</g>
<g >
<title>_IO_fwrite (588,155 samples, 0.10%)</title><rect x="1187.4" y="293" width="1.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1190.35" y="303.5" ></text>
</g>
<g >
<title>vfs_write (53,087 samples, 0.01%)</title><rect x="1187.2" y="213" width="0.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1190.24" y="223.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (763,475 samples, 0.13%)</title><rect x="1183.5" y="261" width="1.6" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1186.52" y="271.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (412,239 samples, 0.07%)</title><rect x="1185.1" y="229" width="0.9" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1188.11" y="239.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;int&gt;::allocate (623,224 samples, 0.11%)</title><rect x="1049.9" y="165" width="1.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1052.91" y="175.5" ></text>
</g>
<g >
<title>__legitimize_path (763,475 samples, 0.13%)</title><rect x="1183.5" y="101" width="1.6" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1186.52" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::end (572,152 samples, 0.10%)</title><rect x="998.7" y="229" width="1.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1001.70" y="239.5" ></text>
</g>
<g >
<title>std::distance&lt;int const*&gt; (669,913 samples, 0.12%)</title><rect x="1041.1" y="213" width="1.4" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1044.13" y="223.5" ></text>
</g>
<g >
<title>__schedule (648,903 samples, 0.11%)</title><rect x="974.7" y="165" width="1.4" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="977.74" y="175.5" ></text>
</g>
<g >
<title>__x64_sys_execve (71,225 samples, 0.01%)</title><rect x="1189.9" y="245" width="0.1" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1192.85" y="255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::allocate (2,974,306 samples, 0.53%)</title><rect x="1045.0" y="181" width="6.2" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1048.01" y="191.5" ></text>
</g>
<g >
<title>ksys_write (53,087 samples, 0.01%)</title><rect x="1187.2" y="229" width="0.2" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="1190.24" y="239.5" ></text>
</g>
<g >
<title>load_elf_binary (71,225 samples, 0.01%)</title><rect x="1189.9" y="197" width="0.1" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="1192.85" y="207.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;int*&gt; (629,910 samples, 0.11%)</title><rect x="1067.2" y="213" width="1.3" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1070.19" y="223.5" ></text>
</g>
<g >
<title>n_tty_write (53,087 samples, 0.01%)</title><rect x="1187.2" y="181" width="0.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1190.24" y="191.5" ></text>
</g>
<g >
<title>write (53,087 samples, 0.01%)</title><rect x="1187.2" y="277" width="0.2" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1190.24" y="287.5" ></text>
</g>
<g >
<title>std::__copy_move_backward_a&lt;true, int*, int*&gt; (588,526 samples, 0.10%)</title><rect x="1011.2" y="181" width="1.2" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1014.16" y="191.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (591,014 samples, 0.10%)</title><rect x="1179.8" y="245" width="1.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1182.81" y="255.5" ></text>
</g>
<g >
<title>perf_event_comm_output (64,421 samples, 0.01%)</title><rect x="1189.9" y="133" width="0.1" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="1192.85" y="143.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (782,587 samples, 0.14%)</title><rect x="13.3" y="261" width="1.6" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="16.27" y="271.5" ></text>
</g>
<g >
<title>cdma_decoder (565,892,685 samples, 99.99%)</title><rect x="10.0" y="309" width="1179.9" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >cdma_decoder</text>
</g>
<g >
<title>tick_sched_timer (579,314 samples, 0.10%)</title><rect x="538.6" y="165" width="1.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="541.59" y="175.5" ></text>
</g>
<g >
<title>put_cpu_partial (591,799 samples, 0.10%)</title><rect x="1078.3" y="101" width="1.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1081.26" y="111.5" ></text>
</g>
<g >
<title>account_user_time (591,014 samples, 0.10%)</title><rect x="1179.8" y="117" width="1.2" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="1182.81" y="127.5" ></text>
</g>
<g >
<title>std::__copy_move_backward_a1&lt;true, int*, int*&gt; (602,171 samples, 0.11%)</title><rect x="1019.9" y="149" width="1.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1022.92" y="159.5" ></text>
</g>
<g >
<title>update_min_vruntime (648,903 samples, 0.11%)</title><rect x="974.7" y="101" width="1.4" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="977.74" y="111.5" ></text>
</g>
<g >
<title>load_elf_binary (412,239 samples, 0.07%)</title><rect x="1185.1" y="197" width="0.9" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="1188.11" y="207.5" ></text>
</g>
<g >
<title>[libc.so.6] (559,317,202 samples, 98.83%)</title><rect x="14.9" y="293" width="1166.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="17.90" y="303.5" >[libc.so.6]</text>
</g>
<g >
<title>operator new (587,183 samples, 0.10%)</title><rect x="1048.7" y="165" width="1.2" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1051.69" y="175.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1,188,833 samples, 0.21%)</title><rect x="1181.0" y="261" width="2.5" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1184.04" y="271.5" ></text>
</g>
<g >
<title>do_group_exit (609,860 samples, 0.11%)</title><rect x="1188.6" y="245" width="1.3" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1191.58" y="255.5" ></text>
</g>
<g >
<title>exc_page_fault (609,422 samples, 0.11%)</title><rect x="1181.0" y="245" width="1.3" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1184.04" y="255.5" ></text>
</g>
<g >
<title>[unknown] (71,225 samples, 0.01%)</title><rect x="1189.9" y="293" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1192.85" y="303.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator==&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; (1,751,518 samples, 0.31%)</title><rect x="1005.0" y="197" width="3.6" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1007.95" y="207.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1,803,748 samples, 0.32%)</title><rect x="537.4" y="245" width="3.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="540.35" y="255.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;int&gt;::construct&lt;int, int&gt; (1,194,538 samples, 0.21%)</title><rect x="1016.2" y="165" width="2.5" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1019.20" y="175.5" ></text>
</g>
<g >
<title>std::__miter_base&lt;int*&gt; (599,848 samples, 0.11%)</title><rect x="1023.6" y="165" width="1.3" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1026.65" y="175.5" ></text>
</g>
<g >
<title>kmem_cache_free (412,239 samples, 0.07%)</title><rect x="1185.1" y="53" width="0.9" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="1188.11" y="63.5" ></text>
</g>
<g >
<title>std::initializer_list&lt;int&gt;::size (594,558 samples, 0.11%)</title><rect x="1043.8" y="213" width="1.2" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1046.77" y="223.5" ></text>
</g>
<g >
<title>gold_code_generator (50,847,801 samples, 8.98%)</title><rect x="976.1" y="261" width="106.0" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="979.09" y="271.5" >gold_code_ge..</text>
</g>
<g >
<title>bprm_execve (412,239 samples, 0.07%)</title><rect x="1185.1" y="213" width="0.9" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1188.11" y="223.5" ></text>
</g>
<g >
<title>all (565,963,910 samples, 100%)</title><rect x="10.0" y="325" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>handle_softirqs (591,799 samples, 0.10%)</title><rect x="1078.3" y="149" width="1.2" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1081.26" y="159.5" ></text>
</g>
<g >
<title>native_write_msr (579,314 samples, 0.10%)</title><rect x="538.6" y="69" width="1.2" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="541.59" y="79.5" ></text>
</g>
<g >
<title>do_user_addr_fault (609,422 samples, 0.11%)</title><rect x="1181.0" y="229" width="1.3" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1184.04" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_S_check_init_len (1,153,852 samples, 0.20%)</title><rect x="1061.0" y="197" width="2.4" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="1064.01" y="207.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (71,225 samples, 0.01%)</title><rect x="1189.9" y="277" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1192.85" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::~vector (3,619,689 samples, 0.64%)</title><rect x="1063.4" y="229" width="7.6" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1066.42" y="239.5" ></text>
</g>
<g >
<title>perf_event_task_tick (579,314 samples, 0.10%)</title><rect x="538.6" y="101" width="1.2" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="541.59" y="111.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::deallocate (591,353 samples, 0.10%)</title><rect x="1069.7" y="181" width="1.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1072.73" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (11,913,161 samples, 2.10%)</title><rect x="1038.6" y="229" width="24.8" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1041.58" y="239.5" >s..</text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;int const*, int*, int&gt; (2,931,012 samples, 0.52%)</title><rect x="1052.4" y="197" width="6.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1055.43" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::pop_back (2,376,475 samples, 0.42%)</title><rect x="1033.6" y="229" width="5.0" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="1036.62" y="239.5" ></text>
</g>
<g >
<title>__folio_alloc (609,422 samples, 0.11%)</title><rect x="1181.0" y="165" width="1.3" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1184.04" y="175.5" ></text>
</g>
<g >
<title>update_curr (648,903 samples, 0.11%)</title><rect x="974.7" y="117" width="1.4" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="977.74" y="127.5" ></text>
</g>
<g >
<title>std::move_backward&lt;int*, int*&gt; (2,974,138 samples, 0.53%)</title><rect x="1019.9" y="181" width="6.2" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1022.92" y="191.5" ></text>
</g>
<g >
<title>createPrintData (460,423,526 samples, 81.35%)</title><rect x="16.1" y="261" width="960.0" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="19.14" y="271.5" >createPrintData</text>
</g>
<g >
<title>main (558,724,871 samples, 98.72%)</title><rect x="16.1" y="277" width="1164.9" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="19.14" y="287.5" >main</text>
</g>
<g >
<title>get_sequence_bit (2,510,363 samples, 0.44%)</title><rect x="977.3" y="245" width="5.2" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="980.30" y="255.5" ></text>
</g>
<g >
<title>[unknown] (763,475 samples, 0.13%)</title><rect x="1183.5" y="277" width="1.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1186.52" y="287.5" ></text>
</g>
<g >
<title>std::forward&lt;int&gt; (582,146 samples, 0.10%)</title><rect x="986.2" y="213" width="1.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="989.24" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator-&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; (1,792,627 samples, 0.32%)</title><rect x="1001.2" y="197" width="3.8" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1004.22" y="207.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (591,014 samples, 0.10%)</title><rect x="1179.8" y="229" width="1.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1182.81" y="239.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (782,587 samples, 0.14%)</title><rect x="13.3" y="245" width="1.6" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="16.27" y="255.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_allocate (2,974,306 samples, 0.53%)</title><rect x="1045.0" y="197" width="6.2" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1048.01" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::push_back (2,981,227 samples, 0.53%)</title><rect x="985.0" y="245" width="6.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="988.01" y="255.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;int&gt;::construct&lt;int, int&gt; (615,429 samples, 0.11%)</title><rect x="1012.4" y="181" width="1.3" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1015.39" y="191.5" ></text>
</g>
<g >
<title>__x64_sys_openat (763,475 samples, 0.13%)</title><rect x="1183.5" y="197" width="1.6" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1186.52" y="207.5" ></text>
</g>
<g >
<title>scheduler_tick (579,314 samples, 0.10%)</title><rect x="538.6" y="117" width="1.2" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="541.59" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (592,052 samples, 0.10%)</title><rect x="1032.4" y="229" width="1.2" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1035.39" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::__normal_iterator (572,421 samples, 0.10%)</title><rect x="994.9" y="197" width="1.2" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="997.94" y="207.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (53,087 samples, 0.01%)</title><rect x="1187.2" y="261" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1190.24" y="271.5" ></text>
</g>
<g >
<title>asm_sysvec_reschedule_ipi (648,903 samples, 0.11%)</title><rect x="974.7" y="229" width="1.4" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="977.74" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::__normal_iterator (1,169,070 samples, 0.21%)</title><rect x="1027.4" y="181" width="2.4" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1030.36" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::operator- (591,796 samples, 0.10%)</title><rect x="987.5" y="197" width="1.2" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="990.45" y="207.5" ></text>
</g>
<g >
<title>std::allocator&lt;int&gt;::~allocator (590,270 samples, 0.10%)</title><rect x="1058.5" y="197" width="1.3" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1061.54" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_insert_rval (15,586,988 samples, 2.75%)</title><rect x="999.9" y="213" width="32.5" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="1002.89" y="223.5" >st..</text>
</g>
<g >
<title>try_to_unlazy (763,475 samples, 0.13%)</title><rect x="1183.5" y="117" width="1.6" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1186.52" y="127.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (609,860 samples, 0.11%)</title><rect x="1188.6" y="293" width="1.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1191.58" y="303.5" ></text>
</g>
<g >
<title>lockref_get_not_dead (763,475 samples, 0.13%)</title><rect x="1183.5" y="85" width="1.6" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="1186.52" y="95.5" ></text>
</g>
<g >
<title>begin_new_exec (71,225 samples, 0.01%)</title><rect x="1189.9" y="181" width="0.1" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1192.85" y="191.5" ></text>
</g>
<g >
<title>__next_zones_zonelist (609,422 samples, 0.11%)</title><rect x="1181.0" y="133" width="1.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1184.04" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::base (1,189,345 samples, 0.21%)</title><rect x="1006.1" y="181" width="2.5" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1009.12" y="191.5" ></text>
</g>
<g >
<title>put_prev_task_fair (648,903 samples, 0.11%)</title><rect x="974.7" y="149" width="1.4" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="977.74" y="159.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;int&gt;::destroy&lt;int&gt; (1,186,720 samples, 0.21%)</title><rect x="1033.6" y="213" width="2.5" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="1036.62" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (591,728 samples, 0.10%)</title><rect x="982.5" y="245" width="1.3" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="985.54" y="255.5" ></text>
</g>
<g >
<title>irqentry_exit (579,411 samples, 0.10%)</title><rect x="1182.3" y="245" width="1.2" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1185.31" y="255.5" ></text>
</g>
<g >
<title>[unknown] (3,026,388 samples, 0.53%)</title><rect x="1181.0" y="293" width="6.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1184.04" y="303.5" ></text>
</g>
<g >
<title>tick_sched_handle (591,014 samples, 0.10%)</title><rect x="1179.8" y="149" width="1.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1182.81" y="159.5" ></text>
</g>
<g >
<title>exit_mmap (609,860 samples, 0.11%)</title><rect x="1188.6" y="197" width="1.3" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1191.58" y="207.5" ></text>
</g>
<g >
<title>mas_store_prealloc (412,239 samples, 0.07%)</title><rect x="1185.1" y="85" width="0.9" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1188.11" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::begin (1,229,191 samples, 0.22%)</title><rect x="996.1" y="229" width="2.6" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="999.14" y="239.5" ></text>
</g>
<g >
<title>__alloc_pages (609,422 samples, 0.11%)</title><rect x="1181.0" y="149" width="1.3" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1184.04" y="159.5" ></text>
</g>
<g >
<title>path_openat (763,475 samples, 0.13%)</title><rect x="1183.5" y="149" width="1.6" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1186.52" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::__normal_iterator (595,920 samples, 0.11%)</title><rect x="990.0" y="181" width="1.2" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="992.98" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::insert (15,586,988 samples, 2.75%)</title><rect x="999.9" y="229" width="32.5" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1002.89" y="239.5" >st..</text>
</g>
<g >
<title>free_pages_and_swap_cache (609,860 samples, 0.11%)</title><rect x="1188.6" y="149" width="1.3" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1191.58" y="159.5" ></text>
</g>
<g >
<title>tlb_batch_pages_flush (609,860 samples, 0.11%)</title><rect x="1188.6" y="165" width="1.3" height="15.0" fill="rgb(234,133,32)" rx="2" ry="2" />
<text  x="1191.58" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_insert_aux&lt;int&gt; (8,400,387 samples, 1.48%)</title><rect x="1008.6" y="197" width="17.5" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="1011.60" y="207.5" ></text>
</g>
<g >
<title>xor_i (5,344,177 samples, 0.94%)</title><rect x="1071.0" y="229" width="11.1" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1073.96" y="239.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (763,475 samples, 0.13%)</title><rect x="1183.5" y="229" width="1.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1186.52" y="239.5" ></text>
</g>
<g >
<title>rcu_do_batch (591,799 samples, 0.10%)</title><rect x="1078.3" y="117" width="1.2" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1081.26" y="127.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (591,014 samples, 0.10%)</title><rect x="1179.8" y="181" width="1.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1182.81" y="191.5" ></text>
</g>
<g >
<title>[unknown] (608,754 samples, 0.11%)</title><rect x="1186.0" y="261" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1188.97" y="271.5" ></text>
</g>
<g >
<title>handle_mm_fault (609,422 samples, 0.11%)</title><rect x="1181.0" y="213" width="1.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1184.04" y="223.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (782,587 samples, 0.14%)</title><rect x="13.3" y="277" width="1.6" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="16.27" y="287.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;false, int const*, int*&gt; (560,506 samples, 0.10%)</title><rect x="1057.4" y="133" width="1.1" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1060.37" y="143.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (71,225 samples, 0.01%)</title><rect x="1189.9" y="229" width="0.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1192.85" y="239.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;int const*, int*&gt; (1,739,887 samples, 0.31%)</title><rect x="1054.9" y="165" width="3.6" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1057.91" y="175.5" ></text>
</g>
<g >
<title>__split_vma (412,239 samples, 0.07%)</title><rect x="1185.1" y="117" width="0.9" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="1188.11" y="127.5" ></text>
</g>
<g >
<title>std::copy&lt;int const*, int*&gt; (1,150,599 samples, 0.20%)</title><rect x="1056.1" y="149" width="2.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1059.14" y="159.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_base (634,630 samples, 0.11%)</title><rect x="1039.8" y="213" width="1.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1042.81" y="223.5" ></text>
</g>
<g >
<title>complete_walk (763,475 samples, 0.13%)</title><rect x="1183.5" y="133" width="1.6" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1186.52" y="143.5" ></text>
</g>
<g >
<title>do_syscall_64 (763,475 samples, 0.13%)</title><rect x="1183.5" y="213" width="1.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1186.52" y="223.5" ></text>
</g>
<g >
<title>__x64_sys_execve (412,239 samples, 0.07%)</title><rect x="1185.1" y="245" width="0.9" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1188.11" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::__normal_iterator (1,229,191 samples, 0.22%)</title><rect x="996.1" y="213" width="2.6" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="999.14" y="223.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.0 (579,314 samples, 0.10%)</title><rect x="538.6" y="85" width="1.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="541.59" y="95.5" ></text>
</g>
<g >
<title>std::__copy_move_backward_a&lt;true, int*, int*&gt; (1,787,729 samples, 0.32%)</title><rect x="1019.9" y="165" width="3.7" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1022.92" y="175.5" ></text>
</g>
<g >
<title>std::__niter_wrap&lt;int*&gt; (586,561 samples, 0.10%)</title><rect x="1024.9" y="165" width="1.2" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1027.90" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; (626,977 samples, 0.11%)</title><rect x="1079.5" y="213" width="1.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1082.49" y="223.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (591,014 samples, 0.10%)</title><rect x="1179.8" y="197" width="1.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1182.81" y="207.5" ></text>
</g>
<g >
<title>update_process_times (591,014 samples, 0.10%)</title><rect x="1179.8" y="133" width="1.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1182.81" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::begin (1,762,471 samples, 0.31%)</title><rect x="1026.1" y="197" width="3.7" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="1029.12" y="207.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,188,833 samples, 0.21%)</title><rect x="1181.0" y="277" width="2.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1184.04" y="287.5" ></text>
</g>
<g >
<title>std::__copy_move_backward_a2&lt;true, int*, int*&gt; (602,171 samples, 0.11%)</title><rect x="1019.9" y="133" width="1.3" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="1022.92" y="143.5" ></text>
</g>
<g >
<title>do_filp_open (763,475 samples, 0.13%)</title><rect x="1183.5" y="165" width="1.6" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1186.52" y="175.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;false, int const*, int*&gt; (589,288 samples, 0.10%)</title><rect x="1054.9" y="149" width="1.2" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1057.91" y="159.5" ></text>
</g>
<g >
<title>tick_program_event (632,691 samples, 0.11%)</title><rect x="539.8" y="181" width="1.3" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="542.80" y="191.5" ></text>
</g>
<g >
<title>schedule (648,903 samples, 0.11%)</title><rect x="974.7" y="181" width="1.4" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="977.74" y="191.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::construct&lt;int, int&gt; (2,404,788 samples, 0.42%)</title><rect x="1013.7" y="181" width="5.0" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1016.67" y="191.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::max_size (588,142 samples, 0.10%)</title><rect x="1062.2" y="165" width="1.2" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="1065.19" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::operator++ (1,177,137 samples, 0.21%)</title><rect x="1077.0" y="213" width="2.5" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1080.04" y="223.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.30] (608,754 samples, 0.11%)</title><rect x="1186.0" y="245" width="1.2" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1188.97" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::end (1,217,324 samples, 0.22%)</title><rect x="988.7" y="197" width="2.5" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="991.69" y="207.5" ></text>
</g>
<g >
<title>cache_from_obj (412,239 samples, 0.07%)</title><rect x="1185.1" y="37" width="0.9" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1188.11" y="47.5" ></text>
</g>
<g >
<title>elf_map (412,239 samples, 0.07%)</title><rect x="1185.1" y="181" width="0.9" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1188.11" y="191.5" ></text>
</g>
<g >
<title>do_syscall_64 (71,225 samples, 0.01%)</title><rect x="1189.9" y="261" width="0.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1192.85" y="271.5" ></text>
</g>
<g >
<title>update_sequences (43,589,986 samples, 7.70%)</title><rect x="991.2" y="245" width="90.9" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="994.22" y="255.5" >update_seq..</text>
</g>
<g >
<title>std::distance&lt;int const*&gt; (594,404 samples, 0.11%)</title><rect x="1059.8" y="197" width="1.2" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1062.77" y="207.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_get_Tp_allocator (585,334 samples, 0.10%)</title><rect x="1051.2" y="197" width="1.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1054.21" y="207.5" ></text>
</g>
<g >
<title>update_process_times (579,314 samples, 0.10%)</title><rect x="538.6" y="133" width="1.2" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="541.59" y="143.5" ></text>
</g>
<g >
<title>do_sys_openat2 (763,475 samples, 0.13%)</title><rect x="1183.5" y="181" width="1.6" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1186.52" y="191.5" ></text>
</g>
<g >
<title>perf_event_comm (64,421 samples, 0.01%)</title><rect x="1189.9" y="165" width="0.1" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1192.85" y="175.5" ></text>
</g>
<g >
<title>free_swap_cache (609,860 samples, 0.11%)</title><rect x="1188.6" y="133" width="1.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1191.58" y="143.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;int*, int&gt; (1,209,216 samples, 0.21%)</title><rect x="1064.7" y="213" width="2.5" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1067.67" y="223.5" ></text>
</g>
<g >
<title>std::allocator&lt;int&gt;::allocator (565,710 samples, 0.10%)</title><rect x="1061.0" y="181" width="1.2" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1064.01" y="191.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (591,799 samples, 0.10%)</title><rect x="1078.3" y="181" width="1.2" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1081.26" y="191.5" ></text>
</g>
<g >
<title>__vm_munmap (412,239 samples, 0.07%)</title><rect x="1185.1" y="165" width="0.9" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="1188.11" y="175.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_range_initialize&lt;int const*&gt; (8,829,178 samples, 1.56%)</title><rect x="1045.0" y="213" width="18.4" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1048.01" y="223.5" ></text>
</g>
<g >
<title>__vma_adjust (412,239 samples, 0.07%)</title><rect x="1185.1" y="101" width="0.9" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="1188.11" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::emplace_back&lt;int&gt; (2,391,266 samples, 0.42%)</title><rect x="986.2" y="229" width="5.0" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="989.24" y="239.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;int const*, int*&gt; (2,339,549 samples, 0.41%)</title><rect x="1053.7" y="181" width="4.8" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1056.66" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::base (592,076 samples, 0.10%)</title><rect x="1074.6" y="213" width="1.3" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1077.62" y="223.5" ></text>
</g>
<g >
<title>file_tty_write.constprop.0 (53,087 samples, 0.01%)</title><rect x="1187.2" y="197" width="0.2" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1190.24" y="207.5" ></text>
</g>
<g >
<title>__mmput (609,860 samples, 0.11%)</title><rect x="1188.6" y="213" width="1.3" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1191.58" y="223.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (591,014 samples, 0.10%)</title><rect x="1179.8" y="213" width="1.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1182.81" y="223.5" ></text>
</g>
<g >
<title>do_exit (609,860 samples, 0.11%)</title><rect x="1188.6" y="229" width="1.3" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1191.58" y="239.5" ></text>
</g>
<g >
<title>std::__numpunct_cache&lt;char&gt;::~__numpunct_cache (608,754 samples, 0.11%)</title><rect x="1186.0" y="277" width="1.2" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1188.97" y="287.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::~_Vector_base (1,181,854 samples, 0.21%)</title><rect x="1068.5" y="213" width="2.5" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1071.50" y="223.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;int*&gt; (1,185,558 samples, 0.21%)</title><rect x="1021.2" y="149" width="2.4" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1024.17" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::pop_back (594,131 samples, 0.10%)</title><rect x="983.8" y="245" width="1.2" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="986.77" y="255.5" ></text>
</g>
<g >
<title>irqentry_exit_to_user_mode (648,903 samples, 0.11%)</title><rect x="974.7" y="213" width="1.4" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="977.74" y="223.5" ></text>
</g>
<g >
<title>vma_alloc_folio (609,422 samples, 0.11%)</title><rect x="1181.0" y="181" width="1.3" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="1184.04" y="191.5" ></text>
</g>
<g >
<title>perf_iterate_sb (64,421 samples, 0.01%)</title><rect x="1189.9" y="149" width="0.1" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1192.85" y="159.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (763,475 samples, 0.13%)</title><rect x="1183.5" y="245" width="1.6" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="1186.52" y="255.5" ></text>
</g>
<g >
<title>do_mas_align_munmap (412,239 samples, 0.07%)</title><rect x="1185.1" y="133" width="0.9" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1188.11" y="143.5" ></text>
</g>
<g >
<title>operator new (603,634 samples, 0.11%)</title><rect x="1014.9" y="165" width="1.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1017.94" y="175.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (609,860 samples, 0.11%)</title><rect x="1188.6" y="261" width="1.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1191.58" y="271.5" ></text>
</g>
<g >
<title>__handle_mm_fault (609,422 samples, 0.11%)</title><rect x="1181.0" y="197" width="1.3" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1184.04" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (1,342,558 samples, 0.24%)</title><rect x="979.7" y="229" width="2.8" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="982.74" y="239.5" ></text>
</g>
<g >
<title>tick_sched_handle (579,314 samples, 0.10%)</title><rect x="538.6" y="149" width="1.2" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="541.59" y="159.5" ></text>
</g>
<g >
<title>tick_sched_timer (591,014 samples, 0.10%)</title><rect x="1179.8" y="165" width="1.2" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1182.81" y="175.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (653,570 samples, 0.12%)</title><rect x="973.4" y="213" width="1.3" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="976.38" y="223.5" ></text>
</g>
<g >
<title>do_syscall_64 (609,860 samples, 0.11%)</title><rect x="1188.6" y="277" width="1.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1191.58" y="287.5" ></text>
</g>
<g >
<title>do_syscall_64 (412,239 samples, 0.07%)</title><rect x="1185.1" y="261" width="0.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1188.11" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (47,453,544 samples, 8.38%)</title><rect x="1082.1" y="261" width="98.9" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1085.11" y="271.5" >std::vector..</text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_deallocate (1,181,854 samples, 0.21%)</title><rect x="1068.5" y="197" width="2.5" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1071.50" y="207.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (648,903 samples, 0.11%)</title><rect x="974.7" y="197" width="1.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="977.74" y="207.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1,803,748 samples, 0.32%)</title><rect x="537.4" y="229" width="3.7" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="540.35" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::operator* (569,584 samples, 0.10%)</title><rect x="1075.9" y="213" width="1.1" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1078.85" y="223.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;int&gt;::max_size (588,142 samples, 0.10%)</title><rect x="1062.2" y="149" width="1.2" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1065.19" y="159.5" ></text>
</g>
<g >
<title>put_prev_entity (648,903 samples, 0.11%)</title><rect x="974.7" y="133" width="1.4" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="977.74" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::cend (1,245,163 samples, 0.22%)</title><rect x="1029.8" y="197" width="2.6" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1032.79" y="207.5" ></text>
</g>
<g >
<title>perf-exec (71,225 samples, 0.01%)</title><rect x="1189.9" y="309" width="0.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1192.85" y="319.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (579,314 samples, 0.10%)</title><rect x="538.6" y="181" width="1.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="541.59" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::back (1,809,120 samples, 0.32%)</title><rect x="987.5" y="213" width="3.7" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="990.45" y="223.5" ></text>
</g>
<g >
<title>std::forward&lt;int&gt; (591,058 samples, 0.10%)</title><rect x="1018.7" y="181" width="1.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1021.69" y="191.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (591,799 samples, 0.10%)</title><rect x="1078.3" y="165" width="1.2" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1081.26" y="175.5" ></text>
</g>
<g >
<title>rcu_core (591,799 samples, 0.10%)</title><rect x="1078.3" y="133" width="1.2" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1081.26" y="143.5" ></text>
</g>
</g>
</svg>
